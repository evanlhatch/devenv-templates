# ~/my-project-templates/template_base/devenv.nix
{
  pkgs,
  inputs,
  lib,
  config,
  ...
}:

let
  # Load the project-specific configuration generated by init-project.sh
  projectConfigFromFile = import ./project_config.nix;

  # Helper for conditional enabling based on project_config.nix
  isPythonProject = projectConfigFromFile.projectType == "python";
  isRustProject = projectConfigFromFile.projectType == "rust";

  # Dynamically determine the path to the language-specific module
  # The init-project.sh script copies the language module as e.g., python_devenv_module.nix
  langModulePath =
    if isPythonProject then
      ./python_devenv_module.nix
    else if isRustProject then
      ./rust_devenv_module.nix
    else
      null;

  languageSpecificModules =
    lib.optionals (langModulePath != null && builtins.pathExists langModulePath)
      [
        (import langModulePath)
        # Pass commonModuleArgs if the module expects it explicitly
        # For now, assume it picks up from `config` and `inputs`
      ];

in
{
  # Make projectConfig available globally within this devenv configuration
  options.projectConfig = lib.mkOption {
    type = lib.types.attrs;
    default = projectConfigFromFile;
    description = "Project specific configurations from project_config.nix";
  };

  # Imports common settings and then language-specific ones
  imports = [ ./devenv_common_module.nix ] ++ languageSpecificModules;

  # Environment variables common to all projects
  env = {
    PROJECT_NAME = config.projectConfig.projectName; # Use from options
    PROJECT_TYPE = config.projectConfig.projectType;
    # EDITOR = "vim"; # User can set this in their global config
  };

  # Direnv integration (devenv manages the .envrc generation for flakes)
  # `direnv.enable = true;` is good if devenv generates the .envrc directly.
  # Since our project flake.nix defines the devShell and .envrc uses `use flake`,
  # this specific `direnv.enable` in devenv.nix might be less critical for activation,
  # but doesn't hurt.

  # Difftastic for better git diffs
  difftastic.enable = true;

  # Shell entry message and initial checks/guidance
  enterShell = ''
    echo "---------------------------------------------------------------------"
    echo "‚úÖ Welcome to '${config.projectConfig.projectName}' (${config.projectConfig.projectType}) devenv environment!"
    echo "---------------------------------------------------------------------"
    if ${lib.boolToString isPythonProject}; then
      echo "üêç Python specific guidance (see python_devenv_module.nix for scripts):"
      echo "   - Python version via Nix: $(python --version 2>&1 || echo 'Python not found')"
      echo "   - uv version via Nix: $(uv --version || echo 'uv not found')"
      echo "   - To set up/sync Python venv: devenv script setup-python"
      echo "   - To activate venv (if created): source .venv/bin/activate"
      if [ ! -d ".venv" ] && [ -f "pyproject.toml" ]; then
        echo "üí° Tip: Run 'devenv script setup-python' to create .venv & install deps."
      fi
      if [ "${builtins.toString config.projectConfig.manageDependenciesWithUv2nix}" == "true" ]; then
        echo "   - To generate uv.nix: devenv script generate-uv-nix"
      fi
    elif ${lib.boolToString isRustProject}; then
      echo "ü¶Ä Rust specific guidance (see rust_devenv_module.nix for scripts):"
      echo "   - Rust toolchain: $(rustc --version 2>&1 || echo 'Rust not found')"
      # Add more Rust-specific messages here
    fi
    echo "   - Common devenv scripts: devenv script list"
    if command -v just &> /dev/null && [ -f "Justfile" ]; then
      echo "   - Available just tasks: just --list"
    fi
    # Infisical check from devenv_common_module.nix will also run
    echo "---------------------------------------------------------------------"
  '';

  # Packages common to all project types
  packages = [
    pkgs.git
    pkgs.gh # GitHub CLI
    pkgs.delta # Better git diffs
    pkgs.just # Task runner
    # Utilities often useful
    pkgs.sd # For find/replace
    pkgs.ripgrep # Fast grep
    pkgs.fd-find # Fast find (often aliased to fd)
    pkgs.eza # Modern ls replacement (was exa)
    pkgs.bat # Cat with syntax highlighting
  ];

  # Scripts common to all project types
  scripts.hello = {
    exec = "echo Hello from the '${config.projectConfig.projectName}' devenv environment!";
    description = "A simple hello script for the project.";
  };
  scripts.update-flake-inputs = {
    exec = "nix flake update";
    description = "Updates all flake inputs and the flake.lock file.";
  };

  # Git Hooks common to all projects (more can be added by language modules)
  # These are merged with hooks from language-specific modules.
  git-hooks = {
    enable = true; # Ensure pre-commit is installed and configured
    hooks = {
      editorconfig-checker.enable = true;
      # check-yaml.enable = true;
      # check-toml.enable = true;
      # end-of-file-fixer.enable = true;
      # trailing-whitespace.enable = true;
    };
  };

  # Services (Tailscale enabled, others commented for opt-in)
  services = {
    tailscale.funnel.enable = true;

    # postgres.enable = lib.mkIf (config.projectConfig.enablePostgres or false) { ... }
    # To enable, set `enablePostgres = true;` in project_config.nix and uncomment/define here or in lang module
    # postgres = {
    #   enable = false; # Default to off, user enables in project_config.nix or by uncommenting
    #   package = pkgs.postgresql_16;
    #   extensions = lib.optionals (isPythonProject || isRustProject) [ # Example condition
    #     (pkgs.postgresqlPackages.pgvecto-rs.override { postgresql = pkgs.postgresql_16; })
    #   ];
    #   initialDatabases = [ { name = config.projectConfig.projectName + "_db"; } ];
    # };

    # meilisearch.enable = false;
    # caddy.enable = false;
    # caddy.configFile = ./Caddyfile;
  };

  # Test configuration
  # `devenv test` will execute this.
  # It can also be a path to a script: enterTest = ./tests/.test.sh;
  enterTest = ''
    echo "üß™ Running common environment tests..."
    echo "Checking for core utilities (git, just)..."
    git --version | grep "git version"
    just --version | grep "just"
    if [ $? -ne 0 ]; then echo "‚ùå Core utility test failed"; exit 1; fi
    echo "‚úÖ Core utilities found."

    # Language-specific tests would be run if their modules add to this
    # or if .test.sh is structured to include them.
    # For now, keeping it simple.

    echo "üéâ Common devenv environment tests passed!"
  '';

  # Example: allow specific impure environment variables to be passed through
  # dotenv.passthrough = [ "INFISICAL_TOKEN" ]; # If you want Nix to see it explicitly
}
